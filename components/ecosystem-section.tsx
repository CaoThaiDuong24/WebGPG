'use client'

import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Truck, ShoppingBag, Brain, Heart, ArrowRight, Sparkles, Star } from "lucide-react"
import { useEffect, useRef, useState } from "react"
import { motion } from "framer-motion"
import { fadeInUp, fadeInLeft, fadeInRight, fadeInScale, staggerContainer, hoverScale } from "./animations"

const ecosystemData = [
  {
    icon: Truck,
    title: "Nh√≥m Th√¢n",
    subtitle: "Logistics & Ph·ª• tr·ª£",
    description:
      "Nh√≥m Th√¢n l√† n·ªÅn t·∫£ng qu√° tr√¨nh TCT ƒêTCT, c√≥ tr√°ch nhi·ªám th·ª±c hi·ªán v√† v·∫≠n h√†nh c√°c ho·∫°t ƒë·ªông logistics v√† ph·ª• tr·ª£. Nh√≥m Th√¢n ƒë·∫£m b·∫£o vi·ªác v·∫≠n chuy·ªÉn v√† cung c·∫•p d·ªãch v·ª• h·ªó tr·ª£ m·ªôt c√°ch hi·ªáu qu·∫£ v√† chuy√™n nghi·ªáp.",
    services: [
      "GPG - C√¥ng ty C·ªï ph·∫ßn B·ªëc D·ª° Ch√¢n Th·∫≠t",
      "GBL - C√¥ng ty TNHH MTV Logistics B·ªëc T·∫£i Ch√¢n Th·∫≠t",
      "GCL - C√¥ng ty TNHH MTV Logistics Ch√¢n Th·∫≠t",
      "AIC - C√¥ng ty C·ªï ph·∫ßn B·ªëc D·ª° Th·ªßy S·∫£n",
      "WOOSUNG - C√¥ng ty TNHH Woosung Vi·ªát Nam",
      "GFL - C√¥ng ty C·ªï ph·∫ßn Logistics Ch√¢n Th·∫≠t",
      "GIL - C√¥ng ty TNHH Logistics Qu·ªëc t·∫ø Ch√¢n Th·∫≠t",
    ],
    image: "/modern-logistics-warehouse-with-containers-and-tru.jpg",
    color: "from-blue-600 to-cyan-500",
  },
  {
    icon: ShoppingBag,
    title: "Nh√≥m T√¢m",
    subtitle: "D·ªãch v·ª• & Th∆∞∆°ng m·∫°i",
    description:
      "Bao tr√πm ƒë√¥ng ƒëa c√°c lƒ©nh v·ª±c d·ªãch v·ª• th∆∞∆°ng m·∫°i t·ª´ b√°n l·∫ª ƒë·∫øn b√°n bu√¥n, t·ª´ th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ ƒë·∫øn th∆∞∆°ng m·∫°i truy·ªÅn th·ªëng. Nh√≥m T√¢m t·∫≠p trung v√†o vi·ªác cung c·∫•p c√°c s·∫£n ph·∫©m v√† d·ªãch v·ª• ch·∫•t l∆∞·ª£ng cao.",
    services: [
      "FMCG - C√¥ng ty C·ªï ph·∫ßn H√†ng ti√™u d√πng Ph√∫ Y√™n",
      "SUZANO CARGO - C√¥ng ty TNHH T∆∞ V·∫•n V·∫≠n T·∫£i An",
      "GTC - C√¥ng ty TNHH Th∆∞∆°ng m·∫°i Ch√¢n Th·∫≠t",
      "FMG - C√¥ng ty Th√†nh Ph√∫ Gia Lai Ch√¢n Th·∫≠t",
      "GRC - C√¥ng ty TNHH B√°n l·∫ª Ch√¢n Th·∫≠t",
    ],
    image: "/modern-retail-store-with-digital-displays-and-cust.jpg",
    color: "from-emerald-600 to-green-500",
  },
  {
    icon: Brain,
    title: "Nh√≥m Tr√≠",
    subtitle: "T∆∞ v·∫•n, ƒë√†o t·∫°o & C√¥ng ngh·ªá",
    description:
      "Nh√≥m kh√¥ng th·ªÉ thi·∫øu trong h·ªá sinh th√°i TCT ƒêTCT, c√≥ tr√°ch nhi·ªám nghi√™n c·ª©u v√† ph√°t tri·ªÉn c√°c gi·∫£i ph√°p c√¥ng ngh·ªá, t∆∞ v·∫•n chi·∫øn l∆∞·ª£c v√† ƒë√†o t·∫°o nh√¢n l·ª±c ch·∫•t l∆∞·ª£ng cao.",
    services: [
      "GCC - C√¥ng ty C·ªï ph·∫ßn T∆∞ v·∫•n Qu·ªëc t·∫ø Ch√¢n Th·∫≠t",
      "LTA - C√¥ng ty C·ªï ph·∫ßn T∆∞ v·∫•n C√¥ng ngh·ªá Logistics",
      "ELC - C√¥ng ty TNHH T∆∞ v·∫•n ƒê√¥ng Gia Lai",
      "GTC - C√¥ng ty TNHH C√¥ng ngh·ªá Ch√¢n Th·∫≠t",
    ],
    image: "/modern-tech-office-with-developers-working-on-comp.jpg",
    color: "from-purple-600 to-violet-500",
  },
  {
    icon: Heart,
    title: "Nh√≥m Thi·ªán",
    subtitle: "C·ªông ƒë·ªìng & An sinh x√£ h·ªôi",
    description:
      "Nh√≥m Thi·ªán th·ªÉ hi·ªán tr√°ch nhi·ªám x√£ h·ªôi c·ªßa TCT ƒêTCT, t·∫≠p trung v√†o c√°c ho·∫°t ƒë·ªông t·ª´ thi·ªán, h·ªó tr·ª£ c·ªông ƒë·ªìng v√† ph√°t tri·ªÉn b·ªÅn v·ªØng.",
    services: [
      "CTYT - C√¢u l·∫°c b·ªô T·ª´ thi·ªán V√¨ Tr·∫ª em Th∆∞∆°ng",
      "GAF - Qu·ªπ T·ª´ thi·ªán T√¢y Nguy√™n H·∫°nh ph√∫c",
      "GWC - C√¥ng ty TNHH ChƒÉm s√≥c V√† V·ªá sinh M√¥i tr∆∞·ªùng",
    ],
    image: "/community-volunteers-helping-children-and-families.jpg",
    color: "from-orange-600 to-red-500",
  },
]

export function EcosystemSection() {
  const sectionRef = useRef<HTMLElement>(null)
  const [isVisible, setIsVisible] = useState(false)
  const [animatedItems, setAnimatedItems] = useState<Set<number>>(new Set())

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true)
          // Animate items with staggered delay
          const timeouts: NodeJS.Timeout[] = []
          ecosystemData.forEach((_, index) => {
            const timeout = setTimeout(() => {
              setAnimatedItems(prev => new Set([...prev, index]))
            }, index * 300)
            timeouts.push(timeout)
          })
          
          return () => {
            timeouts.forEach(clearTimeout)
          }
        }
      },
      { threshold: 0.1 }
    )

    if (sectionRef.current) {
      observer.observe(sectionRef.current)
    }

    return () => {
      if (sectionRef.current) {
        observer.unobserve(sectionRef.current)
      }
    }
  }, [])

  return (
    <motion.section 
      ref={sectionRef} 
      className="relative py-20 sm:py-24 overflow-hidden bg-gradient-to-br from-slate-50 via-blue-50/40 to-indigo-50/60"
      initial="initial"
      whileInView="animate"
      viewport={{ once: true, amount: 0.3 }}
      variants={staggerContainer}
    >
      {/* Animated Background Elements */}
      <div className="absolute inset-0 bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-blue-100/30 via-transparent to-transparent"></div>
      <motion.div 
        className="absolute top-20 left-10 w-48 h-48 bg-gradient-to-r from-blue-400/20 to-indigo-400/20 rounded-full blur-3xl"
        animate={{ 
          scale: [1, 1.3, 1],
          opacity: [0.3, 0.6, 0.3],
          rotate: [0, 180, 360]
        }}
        transition={{ duration: 12, repeat: Infinity, ease: "easeInOut" }}
      />
      <motion.div 
        className="absolute bottom-20 right-10 w-64 h-64 bg-gradient-to-r from-indigo-400/20 to-violet-400/20 rounded-full blur-3xl"
        animate={{ 
          scale: [1, 1.2, 1],
          opacity: [0.2, 0.5, 0.2],
          x: [0, 30, 0],
          y: [0, -20, 0]
        }}
        transition={{ duration: 15, repeat: Infinity, ease: "easeInOut", delay: 3 }}
      />
      
      <div className="container mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        {/* Header */}
        <motion.div className="text-center mb-16" variants={fadeInUp}>
          <motion.div variants={fadeInUp}>
            <Badge className="inline-flex items-center gap-3 px-6 py-3 mb-6 bg-gradient-to-r from-blue-600 via-indigo-600 to-violet-600 text-white border-0 shadow-xl rounded-full">
              <motion.div
                animate={{ rotate: 360 }}
                transition={{ duration: 3, repeat: Infinity, ease: "linear" }}
              >
                <Sparkles className="w-4 h-4" />
              </motion.div>
              <span className="font-semibold">Lƒ©nh v·ª±c kinh doanh</span>
              <motion.div
                animate={{ rotate: [0, 10, -10, 0] }}
                transition={{ duration: 2, repeat: Infinity }}
              >
                <Star className="w-4 h-4" />
              </motion.div>
            </Badge>
          </motion.div>
          
          <motion.h2 className="text-4xl sm:text-5xl md:text-6xl font-black mb-6 leading-tight" variants={fadeInUp}>
            <motion.span 
              className="block"
              style={{
                background: "linear-gradient(45deg, #1e293b, #1e40af, #1e293b)",
                backgroundSize: "300% 300%",
                WebkitBackgroundClip: "text",
                backgroundClip: "text",
                WebkitTextFillColor: "transparent"
              }}
              animate={{
                backgroundPosition: ["0% 50%", "100% 50%", "0% 50%"]
              }}
              transition={{
                duration: 4,
                repeat: Infinity,
                ease: "linear"
              }}
            >
              H·ªá sinh th√°i
            </motion.span>
            <motion.span 
              className="block"
              style={{
                background: "linear-gradient(45deg, #2563eb, #7c3aed, #ec4899, #2563eb)",
                backgroundSize: "300% 300%",
                WebkitBackgroundClip: "text",
                backgroundClip: "text",
                WebkitTextFillColor: "transparent"
              }}
              animate={{
                backgroundPosition: ["0% 50%", "100% 50%", "0% 50%"]
              }}
              transition={{
                duration: 3,
                repeat: Infinity,
                ease: "linear",
                delay: 0.5
              }}
            >
              4 nh√≥m to√†n di·ªán
            </motion.span>
          </motion.h2>
          
          <motion.p 
            className="text-xl md:text-2xl text-slate-600 leading-relaxed font-light max-w-4xl mx-auto"
            variants={fadeInUp}
          >
            Ki·∫øn t·∫°o h·ªá sinh th√°i doanh nghi·ªáp ƒëa ng√†nh, ƒëa lƒ©nh v·ª±c v·ªõi 
            <motion.span 
              className="bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent font-bold"
              animate={{
                backgroundPosition: ["0% 50%", "100% 50%", "0% 50%"]
              }}
              transition={{
                duration: 2,
                repeat: Infinity,
                ease: "linear"
              }}
              style={{
                backgroundSize: "200% 200%"
              }}
            >
              {" "}4 tr·ª• c·ªôt ch√≠nh{" "}
            </motion.span>
            t·∫°o n√™n s·ª©c m·∫°nh t·ªïng th·ªÉ
          </motion.p>
          
          {/* Stats */}
          <motion.div 
            className="grid grid-cols-2 md:grid-cols-4 gap-6 mt-12 max-w-4xl mx-auto"
            variants={staggerContainer}
          >
            {[
              { number: "4", label: "Nh√≥m ch√≠nh", emoji: "üè¢" },
              { number: "20+", label: "C√¥ng ty th√†nh vi√™n", emoji: "üöÄ" },
              { number: "63", label: "T·ªânh th√†nh", emoji: "üåç" },
              { number: "1000+", label: "Nh√¢n vi√™n", emoji: "üë•" }
            ].map((stat, index) => (
              <motion.div 
                key={index} 
                className="group relative text-center p-6 rounded-2xl bg-white/70 backdrop-blur-sm border border-white/30 shadow-lg hover:shadow-xl"
                variants={fadeInScale}
                whileHover={{ 
                  scale: 1.05, 
                  y: -10,
                  boxShadow: "0 20px 40px rgba(59, 130, 246, 0.2)"
                }}
                transition={{ duration: 0.3 }}
              >
                <motion.div 
                  className="text-2xl mb-3"
                  animate={{ 
                    scale: [1, 1.1, 1],
                    rotate: [0, 5, -5, 0]
                  }}
                  transition={{ duration: 3, repeat: Infinity, delay: index * 0.5 }}
                >
                  {stat.emoji}
                </motion.div>
                <motion.div 
                  className="text-3xl font-black bg-gradient-to-r from-blue-600 via-indigo-600 to-violet-600 bg-clip-text text-transparent mb-2"
                  animate={{ 
                    scale: [1, 1.05, 1],
                  }}
                  transition={{ duration: 2, repeat: Infinity, delay: index * 0.3 }}
                >
                  {stat.number}
                </motion.div>
                <p className="text-sm font-semibold text-slate-700">{stat.label}</p>
              </motion.div>
            ))}
          </motion.div>
        </motion.div>

        {/* Ecosystem Cards */}
        <motion.div 
          className="grid grid-cols-1 lg:grid-cols-2 gap-8"
          variants={staggerContainer}
        >
          {ecosystemData.map((item, index) => (
            <motion.div
              key={index}
              variants={fadeInScale}
              whileHover={{ 
                scale: 1.02, 
                y: -10,
                boxShadow: "0 25px 50px rgba(59, 130, 246, 0.15)"
              }}
              transition={{ duration: 0.3 }}
            >
              <Card className="group relative overflow-hidden border-0 bg-white/95 backdrop-blur-xl hover:bg-white transition-all duration-500 shadow-xl hover:shadow-2xl rounded-2xl">
                {/* Header Section */}
                <div className="relative p-6 pb-4">
                  <div className="flex items-start gap-4">
                    <motion.div 
                      className={`relative p-4 rounded-xl bg-gradient-to-r ${item.color} shadow-lg`}
                      whileHover={{ rotate: 6, scale: 1.1 }}
                      transition={{ duration: 0.3 }}
                      animate={{ 
                        boxShadow: [
                          "0 0 0px rgba(59, 130, 246, 0)",
                          "0 0 20px rgba(59, 130, 246, 0.3)",
                          "0 0 0px rgba(59, 130, 246, 0)"
                        ]
                      }}
                      transition={{ duration: 2, repeat: Infinity, delay: index * 0.5 }}
                    >
                      <item.icon className="w-8 h-8 text-white" />
                    </motion.div>
                    <div className="flex-1">
                      <motion.h3 
                        className="text-2xl font-black text-slate-900 mb-2 group-hover:text-slate-800 transition-colors duration-300"
                        initial={{ opacity: 0, x: -20 }}
                        whileInView={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.6, delay: index * 0.1 }}
                        viewport={{ once: true }}
                      >
                        {item.title}
                      </motion.h3>
                      <motion.p 
                        className={`text-lg font-bold bg-gradient-to-r ${item.color} bg-clip-text text-transparent`}
                        initial={{ opacity: 0, x: -20 }}
                        whileInView={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.6, delay: index * 0.1 + 0.2 }}
                        viewport={{ once: true }}
                      >
                        {item.subtitle}
                      </motion.p>
                    </div>
                  </div>
                </div>

                {/* Image Section */}
                <motion.div 
                  className="relative mx-6 mb-4 overflow-hidden rounded-xl shadow-lg group-hover:shadow-xl transition-shadow duration-500"
                  whileHover={{ scale: 1.02 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className="relative h-48 overflow-hidden">
                    <motion.img
                      src={item.image || "/placeholder.svg"}
                      alt={item.title}
                      className="w-full h-full object-cover"
                      whileHover={{ scale: 1.1 }}
                      transition={{ duration: 0.6 }}
                    />
                    <div className={`absolute inset-0 bg-gradient-to-t ${item.color} opacity-15 group-hover:opacity-25 transition-opacity duration-500`}></div>
                    
                    {/* Badge */}
                    <motion.div 
                      className={`absolute top-3 left-3 px-3 py-1 bg-white/95 backdrop-blur-md rounded-lg shadow-md border border-white/20`}
                      whileHover={{ scale: 1.05 }}
                      transition={{ duration: 0.2 }}
                    >
                      <div className="flex items-center gap-2">
                        <motion.div 
                          className={`w-2 h-2 rounded-full bg-gradient-to-r ${item.color}`}
                          animate={{ 
                            scale: [1, 1.2, 1],
                            opacity: [0.7, 1, 0.7]
                          }}
                          transition={{ duration: 2, repeat: Infinity }}
                        />
                        <span className={`text-xs font-bold bg-gradient-to-r ${item.color} bg-clip-text text-transparent`}>
                          {item.services.length} c√¥ng ty
                        </span>
                      </div>
                    </motion.div>
                  </div>
                </motion.div>
                
                {/* Content Section */}
                <CardContent className="relative px-6 pb-6">
                  <motion.p 
                    className="text-slate-600 text-base leading-relaxed mb-4 group-hover:text-slate-700 transition-colors duration-300"
                    initial={{ opacity: 0, y: 20 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6, delay: index * 0.1 + 0.3 }}
                    viewport={{ once: true }}
                  >
                    {item.description}
                  </motion.p>

                  {/* Services */}
                  <motion.div 
                    className="mb-6"
                    initial={{ opacity: 0, y: 20 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6, delay: index * 0.1 + 0.4 }}
                    viewport={{ once: true }}
                  >
                    <h4 className="text-base font-bold text-slate-800 mb-3 flex items-center gap-2">
                      <div className={`w-1 h-4 bg-gradient-to-b ${item.color} rounded-full`}></div>
                      C√¥ng ty th√†nh vi√™n:
                    </h4>
                    <div className="space-y-2">
                      {item.services.slice(0, 3).map((service, serviceIndex) => (
                        <motion.div 
                          key={serviceIndex} 
                          className="flex items-center gap-3 p-3 rounded-lg bg-slate-50/50 hover:bg-white transition-all duration-300"
                          whileHover={{ scale: 1.01, x: 5 }}
                          transition={{ duration: 0.2 }}
                        >
                          <div className={`w-2 h-2 rounded-full bg-gradient-to-r ${item.color} flex-shrink-0`}></div>
                          <span className="text-sm text-slate-700 group-hover:text-slate-900 transition-colors duration-300 font-medium">
                            {service}
                          </span>
                        </motion.div>
                      ))}
                      {item.services.length > 3 && (
                        <div className="text-sm text-slate-500 font-medium pl-5">
                          +{item.services.length - 3} c√¥ng ty kh√°c
                        </div>
                      )}
                    </div>
                  </motion.div>

                  {/* CTA Button */}
                  <motion.div
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    transition={{ duration: 0.2 }}
                  >
                    <Button className={`group/btn relative overflow-hidden bg-gradient-to-r ${item.color} hover:shadow-xl text-white px-6 py-3 text-base font-bold rounded-xl transition-all duration-300 w-full`}>
                      <motion.span 
                        className="relative z-10 flex items-center justify-center gap-2"
                        whileHover={{ x: 5 }}
                        transition={{ duration: 0.3 }}
                      >
                        T√¨m hi·ªÉu th√™m
                        <motion.div
                          animate={{ x: [0, 3, 0] }}
                          transition={{ duration: 1.5, repeat: Infinity }}
                        >
                          <ArrowRight className="w-4 h-4" />
                        </motion.div>
                      </motion.span>
                    </Button>
                  </motion.div>
                </CardContent>
                
                {/* Hover Effect Border */}
                <motion.div 
                  className={`absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r ${item.color} rounded-b-2xl`}
                  initial={{ scaleX: 0 }}
                  whileHover={{ scaleX: 1 }}
                  transition={{ duration: 0.3 }}
                />
              </Card>
            </motion.div>
          ))}
        </motion.div>
      </div>
    </motion.section>
  )
}
